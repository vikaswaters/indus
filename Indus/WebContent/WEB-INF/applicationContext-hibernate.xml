<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">

<!--
  - Application context definition for LBR Login Application on Hibernate.
	-->
<beans>

	<!-- ========================= RESOURCE DEFINITIONS ========================= -->
  
	<!-- Configurer that replaces ${...} placeholders with values from a properties file -->
	<!-- (in this case, JDBC-related settings for the dataSource definition below) -->
	
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location"><value>/WEB-INF/jdbc.properties</value></property>
	</bean>
	

	<!-- Local DataSource that works in any environment -->
	<!-- Note that DriverManagerDataSource does not pool; it is not intended for production. ONLY FOR DEV USE -->
<!--  	
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName"><value>${jdbc.driverClassName}</value></property>
		<property name="url"><value>${jdbc.url}</value></property>
		<property name="username"><value>${jdbc.username}</value></property>
		<property name="password"><value>${jdbc.password}</value></property>
	</bean>
-->
	
<!-- Datasource  that has connection pooling support 
check http://www.mchange.com/projects/c3p0/index.html#maxIdleTime for all paramters for this bean
-->

<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass"><value>${jdbc.driverClassName}</value></property>
		<property name="jdbcUrl"><value>${jdbc.url}</value></property>
		<property name="user"><value>${jdbc.username}</value></property>
		<property name="password"><value>${jdbc.password}</value></property>
		<property name="minPoolSize" value="3" />
		<property name="maxPoolSize" value="20" />
		<property name="maxStatements" value="20" />
		<property name="acquireIncrement" value="3" />
		<property name="acquireRetryAttempts" value="0" />
		<property name="acquireRetryDelay" value="20000" />
		<property name="maxIdleTime" value="120" />     <!--  seconds -->
		<property name="numHelperThreads" value="4" />
	</bean>

	<!-- JNDI DataSource for J2EE environments -->

	<!-- Hibernate SessionFactory -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<property name="dataSource"><ref local="dataSource"/></property>
		<property name="mappingResources">
		<list>
			<value>com/indus/dao/hibernate/Cat.hbm.xml</value>
			<value>com/indus/dao/hibernate/Catalog.hbm.xml</value>
			<value>com/indus/dao/hibernate/Shipping.hbm.xml</value>	
			<value>com/indus/dao/hibernate/Country.hbm.xml</value>
			<value>com/indus/dao/hibernate/Address.hbm.xml</value>
			<value>com/indus/dao/hibernate/Customer.hbm.xml</value>
			<value>com/indus/dao/hibernate/Payment.hbm.xml</value>
			<value>com/indus/dao/hibernate/Orders.hbm.xml</value>	
			<value>com/indus/dao/hibernate/Orderitems.hbm.xml</value>		
		</list>
		</property>
		<property name="hibernateProperties">
			<props>
			<!--
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				-->
				<prop key="hibernate.current_session_context_class">thread</prop>
				<prop key="current_session_context_class">thread</prop>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLMyISAMDialect</prop>
				<prop key="hibernate.show_sql">false</prop>
			</props>
		</property>
	</bean>


	<!-- Transaction manager for a single Hibernate SessionFactory (alternative to JTA) -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory"><ref local="sessionFactory"/></property>
	</bean>


	<!-- ========================= BUSINESS OBJECT DEFINITIONS ========================= -->

	<!--
	 Data access object: Hibernate implementation.
    -->

	<bean id="HibernateSpringDaoTarget" class="com.lbr.dao.SpringHibernateDAOImpl">
		<property name="sessionFactory"><ref local="sessionFactory"/></property>
	</bean>

	<!--
		- Transactional proxy for Login Application central data access object.
		-
		- Defines specific transaction attributes with "readOnly" markers,
		- which is an optimization that is particularly valuable with Hibernate
		- (to suppress unnecessary flush attempts for read-only operations).
		-
		- Note that in a real-life app with multiple transaction proxies,
		- you will probably want to use parent and child bean definitions
		- as described in the manual, to reduce duplication.
    -->

	<bean id="SpringHibernateDao" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
		<property name="transactionManager"><ref local="transactionManager"/></property>
		<property name="target"><ref local="HibernateSpringDaoTarget"/></property>
		<property name="transactionAttributes">
			<props>
				<prop key="get*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="find*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="load*">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="store*">PROPAGATION_REQUIRED</prop>
			</props>
		</property>
	</bean>

	<!-- Email Service-->
	<bean id="mailbean" class="com.lbr.web.common.SendMail">
		<property name="strSmtp"><value>65.54.31.248</value></property>
	</bean>
	
	<bean id="applicationContextProvider" class="com.lbr.utils.ApplicationContextProvider"></bean>

<bean id="catDao" class="com.lbr.dao.genericdao.impl.GenericDaoHibernateImpl">
        <constructor-arg>
            <value>com.indus.dao.hibernate.Cat</value>
        </constructor-arg>
        <property name="sessionFactory">
            <ref bean="sessionFactory"/>
        </property>
</bean>

<bean id="catalogDao" class="com.lbr.dao.genericdao.impl.GenericDaoHibernateImpl">
        <constructor-arg>
            <value>com.indus.dao.hibernate.Catalog</value>
        </constructor-arg>
        <property name="sessionFactory">
            <ref bean="sessionFactory"/>
        </property>
</bean>
<bean id="paymentDao" class="com.lbr.dao.genericdao.impl.GenericDaoHibernateImpl">
        <constructor-arg>
            <value>com.indus.dao.hibernate.Payment</value>
        </constructor-arg>
        <property name="sessionFactory">
            <ref bean="sessionFactory"/>
        </property>
</bean>
<bean id="shippingDao" class="com.lbr.dao.genericdao.impl.GenericDaoHibernateImpl">
        <constructor-arg>
            <value>com.indus.dao.hibernate.Shipping</value>
        </constructor-arg>
        <property name="sessionFactory">
            <ref bean="sessionFactory"/>
        </property>
</bean>
<bean id="customerDao" class="com.lbr.dao.genericdao.impl.GenericDaoHibernateImpl">
        <constructor-arg>
            <value>com.indus.dao.hibernate.Customer</value>
        </constructor-arg>
        <property name="sessionFactory">
            <ref bean="sessionFactory"/>
        </property>
</bean>
<bean id="countryDao" class="com.lbr.dao.genericdao.impl.GenericDaoHibernateImpl">
        <constructor-arg>
            <value>com.indus.dao.hibernate.Country</value>
        </constructor-arg>
        <property name="sessionFactory">
            <ref bean="sessionFactory"/>
        </property>
</bean>
<bean id="addressDao" class="com.lbr.dao.genericdao.impl.GenericDaoHibernateImpl">
        <constructor-arg>
            <value>com.indus.dao.hibernate.Address</value>
        </constructor-arg>
        <property name="sessionFactory">
            <ref bean="sessionFactory"/>
        </property>
</bean>
<bean id="ordersDao" class="com.lbr.dao.genericdao.impl.GenericDaoHibernateImpl">
        <constructor-arg>
            <value>com.indus.dao.hibernate.Orders</value>
        </constructor-arg>
        <property name="sessionFactory">
            <ref bean="sessionFactory"/>
        </property>
</bean>
<bean id="orderitemsDao" class="com.lbr.dao.genericdao.impl.GenericDaoHibernateImpl">
        <constructor-arg>
            <value>com.indus.dao.hibernate.Orderitems</value>
        </constructor-arg>
        <property name="sessionFactory">
            <ref bean="sessionFactory"/>
        </property>
</bean>
</beans>
